{"version":3,"file":"src_app_demo_pages_form-elements_frm-validation_frm-validation_module_ts.js","mappings":";;;;;;;;;;;;;;;;AACuD;AACa;;;AAEpE,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,6EAAsB;KACpC;CACJ,CAAC;AAMK,MAAM,0BAA0B;;oGAA1B,0BAA0B;uHAA1B,0BAA0B;2HAH1B,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC,EAC9B,yDAAY;mIAEb,0BAA0B,oFAFzB,yDAAY;;;;;;;;;;;;;;;;;;;;ACZ2D;AAC/C;;;;;;ICWd,sEAAwC;IAAA,+EAAoB;IAAA,4DAAM;;;IADtE,0EAAqE;IACjE,yHAAkE;IACtE,4DAAM;;;IADI,0DAAgC;IAAhC,mGAAgC;;;IAatC,sEAAwC;IAAA,+EAAoB;IAAA,4DAAM;;;IAClE,sEAAyC;IAAA,iGAAsC;IAAA,4DAAM;;;IACrF,sEAAyC;IAAA,iGAAsC;IAAA,4DAAM;;;IAHzF,0EAAqE;IACjE,0HAAkE;IAClE,0HAAqF;IACrF,0HAAqF;IACzF,4DAAM;;;IAHI,0DAAgC;IAAhC,mGAAgC;IAChC,0DAAiC;IAAjC,oGAAiC;IACjC,0DAAiC;IAAjC,oGAAiC;;;IAavC,sEAAqC;IAAA,4EAAiB;IAAA,4DAAM;;;IAC5D,sEAAkC;IAAA,2EAAgB;IAAA,4DAAM;;;IAF5D,0EAAkE;IAC9D,0HAA4D;IAC5D,0HAAwD;IAC5D,4DAAM;;;IAFI,0DAA6B;IAA7B,gGAA6B;IAC7B,0DAA0B;IAA1B,6FAA0B;;;IAahC,sEAAwC;IAAA,+EAAoB;IAAA,4DAAM;;;IAClE,sEAAyC;IAAA,iGAAsC;IAAA,4DAAM;;;IACrF,sEAAyC;IAAA,iGAAsC;IAAA,4DAAM;;;IAHzF,0EAAqE;IACjE,0HAAkE;IAClE,0HAAqF;IACrF,0HAAqF;IACzF,4DAAM;;;IAHI,0DAAgC;IAAhC,mGAAgC;IAChC,0DAAiC;IAAjC,oGAAiC;IACjC,0DAAiC;IAAjC,oGAAiC;;;IAavC,sEAA+C;IAAA,uFAA4B;IAAA,4DAAM;;;IACjF,sEAA+C;IAAA,0FAA+B;IAAA,4DAAM;;;IAFxF,0EAA4E;IACxE,0HAAiF;IACjF,0HAAoF;IACxF,4DAAM;;;IAFI,0DAAuC;IAAvC,0GAAuC;IACvC,0DAAuC;IAAvC,0GAAuC;;;IAYjD,0EAAwE;IAAA,mFAAwB;IAAA,4DAAM;;;AD1EnH,MAAM,sBAAsB;IAI/B,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAF5C,cAAS,GAAG,KAAK,CAAC;IAE6B,CAAC;IAEhD,QAAQ;QACJ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAC9B;YACI,QAAQ,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACnC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,gEAAoB,CAAC,CAAC,CAAC,EAAE,gEAAoB,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,4DAAgB,CAAC,CAAC;YACpD,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,gEAAoB,CAAC,CAAC,CAAC,EAAE,gEAAoB,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,eAAe,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YAC1C,WAAW,EAAE,CAAC,KAAK,EAAE,mEAAuB,CAAC;SAChD,EACD;YACI,UAAU,EAAE,CAAC,yDAAgB,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;SAChE,CACJ,CAAC;IACN,CAAC;IAED,IAAI,CAAC;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;IAC9B,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACnB,OAAO;SACV;QAED,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED,OAAO;QACH,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;;4FAvCQ,sBAAsB;oHAAtB,sBAAsB;QCTnC,yEAAiB;QACb,yEAAuB;QACnB,8EAAsC;QAClC,0EAAiD;QAAxB,kJAAY,cAAU,IAAC;QAC5C,yEAA6B;QACzB,wEAAO;QAAA,oEAAS;QAAA,4DAAQ;QACxB,sEAKE;QACF,kHAEM;QACV,4DAAM;QAEN,yEAAwB;QACpB,yEAAO;QAAA,oEAAQ;QAAA,4DAAQ;QACvB,uEAKE;QACF,oHAIM;QACV,4DAAM;QAEN,0EAAwB;QACpB,yEAAO;QAAA,iEAAK;QAAA,4DAAQ;QACpB,uEAKE;QACF,oHAGM;QACV,4DAAM;QAEN,0EAAwB;QACpB,yEAAO;QAAA,oEAAQ;QAAA,4DAAQ;QACvB,wEAKE;QACF,oHAIM;QACV,4DAAM;QAEN,0EAAwB;QACpB,yEAAO;QAAA,4EAAgB;QAAA,4DAAQ;QAC/B,wEAKE;QACF,oHAGM;QACV,4DAAM;QAEN,2EAAmC;QAC/B,wEAKE;QACF,6EAAkD;QAAA,8FAAkC;QAAA,4DAAQ;QAC5F,oHAAsG;QAC1G,4DAAM;QAEN,0EAAwB;QACpB,8EAA8C;QAAA,oEAAQ;QAAA,4DAAS;QAC/D,8EAA8E;QAAxD,+IAAS,aAAS,IAAC;QAAqC,iEAAK;QAAA,4DAAS;QAChG,4DAAM;QACV,4DAAO;QA+EX,4DAAW;QACf,4DAAM;QACV,4DAAM;;QAxKY,0DAAkB;QAAlB,+EAAkB;QAOZ,0DAA4D;QAA5D,mLAA4D;QAE1D,0DAAoC;QAApC,wGAAoC;QAWtC,0DAA4D;QAA5D,mLAA4D;QAE1D,0DAAoC;QAApC,wGAAoC;QAatC,0DAAyD;QAAzD,gLAAyD;QAEvD,0DAAiC;QAAjC,qGAAiC;QAYnC,0DAA4D;QAA5D,mLAA4D;QAE1D,0DAAoC;QAApC,wGAAoC;QAatC,0DAAmE;QAAnE,0LAAmE;QAEjE,0DAA2C;QAA3C,+GAA2C;QAW7C,0DAA+D;QAA/D,sLAA+D;QAG7D,0DAAuC;QAAvC,2GAAuC;;;;;;;;;;;;;;;;;;;;;AClFlB;AAE8B;AACT;AACE;;AAM/D,MAAM,mBAAmB;;sFAAnB,mBAAmB;gHAAnB,mBAAmB;oHAHnB,CAAC,yDAAY,EAAE,sFAA0B,EAAE,qEAAY,CAAC;mIAGxD,mBAAmB,mBAFb,6EAAsB,aAD3B,yDAAY,EAAE,sFAA0B,EAAE,qEAAY;;;;;;;;;;;;;;;ACNrD,MAAM,UAAU;IAC3B,MAAM,CAAC,KAAK,CAAC,WAAmB,EAAE,gBAAwB;QACtD,OAAO,CAAC,QAAyB,EAAE,EAAE;YACjC,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC1C,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAEpD,IAAI,YAAY,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACtD,OAAO,IAAI,CAAC;aACf;YAED,IAAI,OAAO,CAAC,KAAK,KAAK,YAAY,CAAC,KAAK,EAAE;gBACtC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC7D,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aAC7B;iBAAM;gBACH,OAAO,IAAI,CAAC;aACf;QACL,CAAC,CAAC;IACN,CAAC;CACJ","sources":["./src/app/demo/pages/form-elements/frm-validation/frm-validation-routing.module.ts","./src/app/demo/pages/form-elements/frm-validation/frm-validation.component.ts","./src/app/demo/pages/form-elements/frm-validation/frm-validation.component.html","./src/app/demo/pages/form-elements/frm-validation/frm-validation.module.ts","./src/app/demo/pages/form-elements/frm-validation/validation.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FrmValidationComponent } from './frm-validation.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: FrmValidationComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class FrmValidationRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport Validation from './validation';\n\n@Component({\n    selector: 'app-frm-validation',\n    templateUrl: './frm-validation.component.html',\n    styleUrls: ['./frm-validation.component.scss']\n})\nexport class FrmValidationComponent implements OnInit {\n    form: FormGroup;\n    submitted = false;\n\n    constructor(private formBuilder: FormBuilder) {}\n\n    ngOnInit(): void {\n        this.form = this.formBuilder.group(\n            {\n                fullname: ['', Validators.required],\n                username: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(20)]],\n                email: ['', [Validators.required, Validators.email]],\n                password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(40)]],\n                confirmPassword: ['', Validators.required],\n                acceptTerms: [false, Validators.requiredTrue]\n            },\n            {\n                validators: [Validation.match('password', 'confirmPassword')]\n            }\n        );\n    }\n\n    get f(): { [key: string]: AbstractControl } {\n        return this.form.controls;\n    }\n\n    onSubmit(): void {\n        this.submitted = true;\n\n        if (this.form.invalid) {\n            return;\n        }\n\n        console.log(JSON.stringify(this.form.value, null, 2));\n    }\n\n    onReset(): void {\n        this.submitted = false;\n        this.form.reset();\n    }\n}\n","<div class=\"row\">\n    <div class=\"col-sm-12\">\n        <app-card cardTitle=\"Form Validation\">\n            <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"form-group mt-3\">\n                    <label>Full Name</label>\n                    <input\n                        type=\"text\"\n                        formControlName=\"fullname\"\n                        class=\"form-control\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.fullname.errors }\"\n                    />\n                    <div *ngIf=\"submitted && f.fullname.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.fullname.errors.required\">Fullname is required</div>\n                    </div>\n                </div>\n\n                <div class=\"form-group\">\n                    <label>Username</label>\n                    <input\n                        type=\"text\"\n                        formControlName=\"username\"\n                        class=\"form-control\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\"\n                    />\n                    <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.username.errors.required\">Username is required</div>\n                        <div *ngIf=\"f.username.errors.minlength\">Username must be at least 6 characters</div>\n                        <div *ngIf=\"f.username.errors.maxlength\">Username must not exceed 20 characters</div>\n                    </div>\n                </div>\n\n                <div class=\"form-group\">\n                    <label>Email</label>\n                    <input\n                        type=\"text\"\n                        formControlName=\"email\"\n                        class=\"form-control\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\"\n                    />\n                    <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                        <div *ngIf=\"f.email.errors.email\">Email is invalid</div>\n                    </div>\n                </div>\n\n                <div class=\"form-group\">\n                    <label>Password</label>\n                    <input\n                        type=\"password\"\n                        formControlName=\"password\"\n                        class=\"form-control\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"\n                    />\n                    <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                        <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n                        <div *ngIf=\"f.password.errors.maxlength\">Username must not exceed 40 characters</div>\n                    </div>\n                </div>\n\n                <div class=\"form-group\">\n                    <label>Confirm Password</label>\n                    <input\n                        type=\"password\"\n                        formControlName=\"confirmPassword\"\n                        class=\"form-control\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\"\n                    />\n                    <div *ngIf=\"submitted && f.confirmPassword.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.confirmPassword.errors.required\">Confirm Password is required</div>\n                        <div *ngIf=\"f.confirmPassword.errors.matching\">Confirm Password does not match</div>\n                    </div>\n                </div>\n\n                <div class=\"form-group form-check\">\n                    <input\n                        type=\"checkbox\"\n                        formControlName=\"acceptTerms\"\n                        class=\"form-check-input\"\n                        [ngClass]=\"{ 'is-invalid': submitted && f.acceptTerms.errors }\"\n                    />\n                    <label for=\"acceptTerms\" class=\"form-check-label\">I have read and agree to the Terms</label>\n                    <div *ngIf=\"submitted && f.acceptTerms.errors\" class=\"invalid-feedback\">Accept Terms is required</div>\n                </div>\n\n                <div class=\"form-group\">\n                    <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n                    <button type=\"button\" (click)=\"onReset()\" class=\"btn btn-warning float-right\">Reset</button>\n                </div>\n            </form>\n            <!-- <form #validationForm=\"ngForm\" class=\"editForm\" novalidate>\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-control-label\" for=\"email\">Email</label>\n                <input class=\"form-control input-md\" id=\"email\" name=\"email\" type=\"text\" placeholder=\"Enter Email\" [ngClass]=\"{'is-invalid': !email.valid && (email.dirty || email.touched || isSubmit)}\" #email=\"ngModel\" required email [(ngModel)]=\"formInput.email\">\n                <label *ngIf=\"!email.valid && (email.dirty || email.touched || isSubmit)\" id=\"validation-email-error\" class=\"error jquery-validation-error small form-text invalid-feedback\">Please enter a valid email address.</label>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-label\">Password</label>\n                <input type=\"password\" class=\"form-control\" name=\"validation-password\" placeholder=\"Enter Password\" [ngClass]=\"{'is-invalid': !password.valid && (password.dirty || password.touched || isSubmit)}\" #password=\"ngModel\" minlength=\"6\" required [(ngModel)]=\"formInput.password\">\n                <label *ngIf=\"!password.valid && (password.dirty || password.touched || isSubmit)\" id=\"validation-password-error\" class=\"error jquery-validation-error small form-text invalid-feedback\">Please enter a valid password.</label>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-label\">Confirm password</label>\n                <input type=\"password\" class=\"form-control\" name=\"validation-password-confirm\" placeholder=\"Enter Confirm Password\" [ngClass]=\"{'is-invalid': !confirmPassword.valid && (confirmPassword.dirty || confirmPassword.touched || isSubmit)}\" #confirmPassword=\"ngModel\" [equalTo]=\"password\" [(ngModel)]=\"formInput.confirmPassword\">\n                <label *ngIf=\"!confirmPassword.valid && (confirmPassword.dirty || confirmPassword.touched || isSubmit)\" id=\"validation-password-confirm-error\" class=\"error jquery-validation-error small form-text invalid-feedback\">Please enter a valid confirm  password.</label>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-label\">Required</label>\n                <input type=\"text\" class=\"form-control\" name=\"validation-required\" placeholder=\"Enter Value\" [ngClass]=\"{'is-invalid': !requiredInput.valid && (requiredInput.dirty || requiredInput.touched || isSubmit)}\" #requiredInput=\"ngModel\" required [(ngModel)]=\"formInput.requiredInput\">\n                <label *ngIf=\"!requiredInput.valid && (requiredInput.dirty || requiredInput.touched || isSubmit)\" id=\"validation-required-error\" class=\"error jquery-validation-error small form-text invalid-feedback\">This field should be required</label>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-label\">URL</label>\n                <input type=\"text\" class=\"form-control\" name=\"validation-url\" placeholder=\"Enter Value\" [ngClass]=\"{'is-invalid': !url.valid && (url.dirty || url.touched || isSubmit)}\" #url=\"ngModel\" required url [(ngModel)]=\"formInput.url\">\n                <label *ngIf=\"!url.valid && (url.dirty || url.touched || isSubmit)\" id=\"validation-url-error\" class=\"error jquery-validation-error small form-text invalid-feedback\">Please enter valid URL.</label>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-label\">Phone</label>\n                <input type=\"text\" class=\"form-control\" name=\"validation-phone\" placeholder=\"Enter Contact Number\" [ngClass]=\"{'is-invalid': !phone.valid && (phone.dirty || phone.touched || isSubmit)}\" #phone=\"ngModel\" required maxlength=\"12\" minlength=\"10\" phone=\"IN\" [(ngModel)]=\"formInput.phone\">\n                <label *ngIf=\"!phone.valid && (phone.dirty || phone.touched || isSubmit)\" id=\"validation-phone-error\" class=\"error jquery-validation-error small form-text invalid-feedback\">Please enter valid contact number.</label>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-label\">Select</label>\n                <select class=\"form-control\" name=\"validation-cmbGear\" [ngClass]=\"{'is-invalid': !cmbGear.valid && (cmbGear.dirty || cmbGear.touched || isSubmit)}\" #cmbGear=\"ngModel\" required [(ngModel)]=\"formInput.cmbGear\">\n                  <option value>Select gear...</option>\n                  <optgroup label=\"Climbing\">\n                    <option value=\"pitons\">Pitons</option>\n                    <option value=\"cams\">Cams</option>\n                    <option value=\"nuts\">Nuts</option>\n                    <option value=\"bolts\">Bolts</option>\n                    <option value=\"stoppers\">Stoppers</option>\n                    <option value=\"sling\">Sling</option>\n                  </optgroup>\n                  <optgroup label=\"Skiing\">\n                    <option value=\"skis\">Skis</option>\n                    <option value=\"skins\">Skins</option>\n                    <option value=\"poles\">Poles</option>\n                  </optgroup>\n                </select>\n                <label *ngIf=\"!cmbGear.valid && (cmbGear.dirty || cmbGear.touched || isSubmit)\" id=\"validation-cmbGear-error\" class=\"error jquery-validation-error small form-text invalid-feedback\">The Gear selection should be required.</label>\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <label class=\"form-label\">Address</label>\n                <textarea class=\"form-control\" name=\"validation-address\" [ngClass]=\"{'is-invalid': !address.valid && (address.dirty || address.touched || isSubmit)}\" #address=\"ngModel\" required [(ngModel)]=\"formInput.address\"></textarea>\n                <label *ngIf=\"!address.valid && (address.dirty || address.touched || isSubmit)\" id=\"validation-address-error\" class=\"error jquery-validation-error small form-text invalid-feedback\">The address field should be required.</label>\n              </div>\n            </div>\n          </div>\n          <div class=\"form-group text-center\">\n            <button type=\"button\" uiSref=\"work\" class=\"btn btn-primary btn-raised\"  (click)=\"save(validationForm)\"> Able Pro <span style=\"margin-left:10px;\"><i class=\"feather icon-chevron-right\"></i></span></button>\n          </div>\n      </form> -->\n        </app-card>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FrmValidationRoutingModule } from './frm-validation-routing.module';\nimport { FrmValidationComponent } from './frm-validation.component';\nimport { SharedModule } from '../../../../theme/shared/shared.module';\n\n@NgModule({\n    imports: [CommonModule, FrmValidationRoutingModule, SharedModule],\n    declarations: [FrmValidationComponent]\n})\nexport class FrmValidationModule {}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport default class Validation {\n    static match(controlName: string, checkControlName: string): ValidatorFn {\n        return (controls: AbstractControl) => {\n            const control = controls.get(controlName);\n            const checkControl = controls.get(checkControlName);\n\n            if (checkControl.errors && !checkControl.errors.matching) {\n                return null;\n            }\n\n            if (control.value !== checkControl.value) {\n                controls.get(checkControlName).setErrors({ matching: true });\n                return { matching: true };\n            } else {\n                return null;\n            }\n        };\n    }\n}\n"],"names":[],"sourceRoot":"webpack:///"}