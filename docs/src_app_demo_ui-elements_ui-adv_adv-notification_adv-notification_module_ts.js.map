{"version":3,"file":"src_app_demo_ui-elements_ui-adv_adv-notification_adv-notification_module_ts.js","mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,qBAAqB,mBAAmB;AACnG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yCAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yCAAO;AAClC,gCAAgC,yCAAO;AACvC,gCAAgC,yCAAO;AACvoBAAoB,0CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,yCAAyC;AACzC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG,MAAM;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,aAAa,MAAM;AACrE,SAAS;AACT;AACA;AACA,2DAA2D,iCAAiC,sDAAe;AAC3G,qCAAqC,gEAAyB,GAAG,+CAA+C,kCAAkC;AAClJ;AACA,MAAM,gCAAgC,MAAM,iDAAM,iCAAiC;AACnF;AACA,iDAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iDAAU,GAAG,8CAAO,IAAI,qDAAM;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,mCAAmC,+DAAwB;AAC1H,sCAAsC,+DAAwB,GAAG,sEAAsE,gBAAgB,kOAAkO;AACzX,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB;AACzB,QAAQ,0DAAmB;AAC3B,MAAM;AACN,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,OAAO,eAAe,oDAAc,EAAE,oDAAc,yCAAyC;AAC7F;AACA,MAAM;AACN;AACA,iDAAU;AACV,IAAI,oDAAK;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,qCAAqC,+DAAwB,GAAG,qEAAqE,gBAAgB,8TAA8T;AACnd,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB,6EAA6E,uCAAuC,8CAA8C,wEAAwE,oCAAoC,sEAAsE,wDAAwD;AACra,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,oDAAa;AACrB,QAAQ,oDAAa;AACrB,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,MAAM;AACN,QAAQ,wDAAiB,YAAY,6DAAsB;AAC3D,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,+DAAwB,CAAC,yDAAkB;AACnD,OAAO,4BAA4B,QAAQ,oDAAc,IAAI,uBAAuB,wBAAwB,wCAAwC;AACpJ,iDAAU;AACV,IAAI,oDAAK;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,mCAAmC,+DAAwB;AAC1H,sCAAsC,+DAAwB,GAAG,mVAAmV;AACpZ,QAAQ,wDAAiB;AACzB,QAAQ,wDAAiB;AACzB,QAAQ,oDAAa;AACrB,MAAM;AACN,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB,YAAY,yDAAkB;AACvD,OAAO,4BAA4B,QAAQ,iDAAW,EAAE,oDAAc,oBAAoB,uBAAuB,kBAAkB,sDAAgB,IAAI,oBAAoB;AAC3K;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA,gCAAgC,uDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iDAAiaAAa;AACb;AACA;AACA;AACA;AACA,2DAA2D,iCAAiC,+DAAwB;AACpH,oCAAoC,+DAAwB,GAAG,mEAAmE,gBAAgB,aAAa,8BAA8B,2uBAA2uB;AACx6B,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB,kFAAkF,mCAAmC,qEAAqE,uBAAuB,+EAA+E,4BAA4B,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","sources":["./src/app/demo/ui-elements/ui-adv/adv-notification/adv-notification-routing.module.ts","./src/app/demo/ui-elements/ui-adv/adv-notification/adv-notification.component.ts","./src/app/demo/ui-elements/ui-adv/adv-notification/adv-notification.component.html","./src/app/demo/ui-elements/ui-adv/adv-notification/adv-notification.module.ts","./node_modules/ng-snotify/__ivy_ngcc__/fesm2015/ng-snotify.js"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdvNotificationComponent } from './adv-notification.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AdvNotificationComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AdvNotificationRoutingModule {}\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SnotifyPosition, SnotifyService, SnotifyToastConfig } from 'ng-snotify';\n\n@Component({\n    selector: 'app-adv-notification',\n    templateUrl: './adv-notification.component.html',\n    styleUrls: ['./adv-notification.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AdvNotificationComponent implements OnInit {\n    style = 'material';\n    title = 'Snotify title!';\n    body = 'Lorem ipsum dolor sit amet!';\n    timeout = 3000;\n    position: SnotifyPosition = SnotifyPosition.rightBottom;\n    progressBar = true;\n    closeClick = true;\n    newTop = true;\n    filterDuplicates = false;\n    backdrop = -1;\n    dockMax = 8;\n    blockMax = 6;\n    pauseHover = true;\n    titleMaxLength = 15;\n    bodyMaxLength = 80;\n\n    constructor(private snotifyService: SnotifyService) {}\n\n    ngOnInit() {}\n\n    getConfig(): SnotifyToastConfig {\n        this.snotifyService.setDefaults({\n            global: {\n                newOnTop: this.newTop,\n                maxAtPosition: this.blockMax,\n                maxOnScreen: this.dockMax,\n                // @ts-ignore\n                filterDuplicates: this.filterDuplicates\n            }\n        });\n        return {\n            bodyMaxLength: this.bodyMaxLength,\n            titleMaxLength: this.titleMaxLength,\n            backdrop: this.backdrop,\n            position: this.position,\n            timeout: this.timeout,\n            showProgressBar: this.progressBar,\n            closeOnClick: this.closeClick,\n            pauseOnHover: this.pauseHover\n        };\n    }\n\n    onSuccess() {\n        this.snotifyService.success(this.body, this.title, this.getConfig());\n    }\n    onInfo() {\n        this.snotifyService.info(this.body, this.title, this.getConfig());\n    }\n    onError() {\n        this.snotifyService.error(this.body, this.title, this.getConfig());\n    }\n    onWarning() {\n        this.snotifyService.warning(this.body, this.title, this.getConfig());\n    }\n    onSimple() {\n        // const icon = `assets/custom-svg.svg`;\n        const icon = `https://placehold.it/48x100`;\n\n        this.snotifyService.simple(this.body, this.title, {\n            ...this.getConfig(),\n            icon\n        });\n    }\n\n    onAsyncLoading() {\n        const errorAction = new Observable((observer) => {\n            setTimeout(() => {\n                observer.error({\n                    title: 'Error',\n                    body: 'Example. Error 404. Service not found'\n                });\n            }, 2000);\n        });\n\n        const successAction = new Observable((observer) => {\n            setTimeout(() => {\n                observer.next({\n                    body: 'Still loading.....'\n                });\n            }, 2000);\n\n            setTimeout(() => {\n                observer.next({\n                    title: 'Success',\n                    body: 'Example. Data loaded!',\n                    config: {\n                        closeOnClick: true,\n                        timeout: 5000,\n                        showProgressBar: true\n                    }\n                });\n                observer.complete();\n            }, 5000);\n        });\n\n        /*\n      You should pass Promise or Observable of type Snotify to change some data or do some other actions\n      More information how to work with observables:\n      https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/create.md\n     */\n        const { timeout, ...config } = this.getConfig(); // Omit timeout\n        this.snotifyService.async('This will resolve with error', 'Async', errorAction, config);\n        this.snotifyService.async('This will resolve with success', successAction, config);\n        this.snotifyService.async(\n            'Called with promise',\n            'Error async',\n            new Promise((resolve, reject) => {\n                setTimeout(\n                    () =>\n                        reject({\n                            title: 'Error!!!',\n                            body: 'We got an example error!',\n                            config: {\n                                closeOnClick: true\n                            }\n                        }),\n                    1000\n                );\n                setTimeout(\n                    () =>\n                        resolve({\n                            title: 'Suceess!!!',\n                            body: 'We got an example!',\n                            config: {\n                                closeOnClick: true\n                            }\n                        }),\n                    1500\n                );\n            }),\n            config\n        );\n    }\n\n    onConfirmation() {\n        /*\n    Here we pass an buttons array, which contains of 2 element of type SnotifyButton\n     */\n        const { timeout, closeOnClick, ...config } = this.getConfig(); // Omit props what i don't need\n        this.snotifyService.confirm(this.body, this.title, {\n            ...config,\n            buttons: [\n                { text: 'Yes', action: () => console.log('Clicked: Yes'), bold: false },\n                { text: 'No', action: () => console.log('Clicked: No') },\n                {\n                    text: 'Later',\n                    action: (toast) => {\n                        console.log('Clicked: Later');\n                        this.snotifyService.remove(toast.id);\n                    }\n                },\n                {\n                    text: 'Close',\n                    action: (toast) => {\n                        console.log('Clicked: Close');\n                        this.snotifyService.remove(toast.id);\n                    },\n                    bold: true\n                }\n            ]\n        });\n    }\n\n    onPrompt() {\n        /*\n     Here we pass an buttons array, which contains of 2 element of type SnotifyButton\n     At the action of the first buttons we can get what user entered into input field.\n     At the second we can't get it. But we can remove this toast\n     */\n        const { timeout, closeOnClick, ...config } = this.getConfig(); // Omit props what i don't need\n        this.snotifyService\n            .prompt(this.body, this.title, {\n                ...config,\n                buttons: [\n                    {\n                        text: 'Yes',\n                        action: (toast) => console.log('Said Yes: ' + toast.value)\n                    },\n                    {\n                        text: 'No',\n                        action: (toast) => {\n                            console.log('Said No: ' + toast.value);\n                            this.snotifyService.remove(toast.id);\n                        }\n                    }\n                ],\n                placeholder: 'Enter \"ng-snotify\" to validate this input' // Max-length = 40\n            })\n            .on('input', (toast) => {\n                console.log(toast.value);\n                toast.valid = !!toast.value.match('ng-snotify');\n            });\n    }\n\n    onHtml() {\n        const html = `<div class=\"snotifyToast__title\"><b>Html Bold Title</b></div>\n    <div class=\"snotifyToast__body\"><i>Html</i> <b>toast</b> <u>content</u></div>`;\n        this.snotifyService.html(html, this.getConfig());\n    }\n\n    onClear() {\n        this.snotifyService.clear();\n    }\n}\n","<div class=\"row btn-page\">\n    <div class=\"col-sm-12\">\n        <app-card cardTitle=\"Toast Live Customization\">\n            <div class=\"row\">\n                <div class=\"col-sm-6\">\n                    <div class=\"form-group\">\n                        <label for=\"title\">Title</label>\n                        <input [(ngModel)]=\"title\" type=\"text\" id=\"title\" class=\"form-control\" />\n                    </div>\n                </div>\n                <div class=\"col-sm-6\">\n                    <div class=\"form-group\">\n                        <label for=\"body\">Body</label>\n                        <textarea [(ngModel)]=\"body\" id=\"body\" rows=\"2\" class=\"form-control\"></textarea>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-sm-6\">\n                    <div class=\"form-group\">\n                        <label for=\"titlemaxlen\">Title max-length</label>\n                        <input [(ngModel)]=\"titleMaxLength\" type=\"text\" id=\"titlemaxlen\" class=\"form-control\" />\n                    </div>\n                </div>\n                <div class=\"col-sm-6\">\n                    <div class=\"form-group\">\n                        <label for=\"bodymaxlen\">Body max-length</label>\n                        <input [(ngModel)]=\"bodyMaxLength\" type=\"text\" id=\"bodymaxlen\" class=\"form-control\" />\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-sm-6\">\n                    <div class=\"form-group\">\n                        <label for=\"timeout\">Timeout</label>\n                        <input [(ngModel)]=\"timeout\" type=\"number\" id=\"timeout\" class=\"form-control\" />\n                    </div>\n                </div>\n                <div class=\"col-sm-6\">\n                    <div class=\"form-group\">\n                        <label for=\"backdrop\"> Backdrop (0.0 - 1.0) </label>\n                        <input [(ngModel)]=\"backdrop\" type=\"number\" id=\"backdrop\" class=\"form-control\" min=\"-1\" max=\"1\" />\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <div class=\"form-group\">\n                        <label for=\"position\">Position</label>\n                        <select [(ngModel)]=\"position\" id=\"position\" class=\"form-control\">\n                            <option [ngValue]=\"'leftTop'\">LEFT - TOP</option>\n                            <option [ngValue]=\"'leftCenter'\">LEFT - CENTER</option>\n                            <option [ngValue]=\"'leftBottom'\">LEFT - BOTTOM</option>\n                            <option [ngValue]=\"'rightTop'\">RIGHT - TOP</option>\n                            <option [ngValue]=\"'rightCenter'\">RIGHT - CENTER</option>\n                            <option [ngValue]=\"'rightBottom'\">RIGHT - BOTTOM</option>\n                            <option [ngValue]=\"'centerTop'\">CENTER - TOP</option>\n                            <option [ngValue]=\"'centerCenter'\">CENTER - CENTER</option>\n                            <option [ngValue]=\"'centerBottom'\">CENTER - BOTTOM</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <div class=\"switch-group-wrapper\">\n                        <div class=\"switch-wrapper\">\n                            <strong>Show progress bar?</strong>\n                            <div class=\"switch\">\n                                <input [(ngModel)]=\"progressBar\" id=\"progressBar\" class=\"cmn-toggle cmn-toggle-yes-no\" type=\"checkbox\" />\n                                <label for=\"progressBar\" data-on=\"On\" data-off=\"Off\"></label>\n                            </div>\n                        </div>\n                        <div class=\"switch-wrapper\">\n                            <strong>Close on click?</strong>\n                            <div class=\"switch\">\n                                <input [(ngModel)]=\"closeClick\" id=\"closeClick\" class=\"cmn-toggle cmn-toggle-yes-no\" type=\"checkbox\" />\n                                <label for=\"closeClick\" data-on=\"On\" data-off=\"Off\"></label>\n                            </div>\n                        </div>\n                        <div class=\"switch-wrapper\">\n                            <strong>Pause on hover?</strong>\n                            <div class=\"switch\">\n                                <input [(ngModel)]=\"pauseHover\" id=\"pauseHover\" class=\"cmn-toggle cmn-toggle-yes-no\" type=\"checkbox\" />\n                                <label for=\"pauseHover\" data-on=\"On\" data-off=\"Off\"></label>\n                            </div>\n                        </div>\n                        <div class=\"switch-wrapper\">\n                            <strong>New items on top?</strong>\n                            <div class=\"switch\">\n                                <input [(ngModel)]=\"newTop\" id=\"newTop\" class=\"cmn-toggle cmn-toggle-yes-no\" type=\"checkbox\" />\n                                <label for=\"newTop\" data-on=\"On\" data-off=\"Off\"></label>\n                            </div>\n                        </div>\n                        <div class=\"switch-wrapper\">\n                            <strong>Filter duplicates?</strong>\n                            <div class=\"switch\">\n                                <input\n                                    [(ngModel)]=\"filterDuplicates\"\n                                    id=\"filterDuplicates\"\n                                    class=\"cmn-toggle cmn-toggle-yes-no\"\n                                    type=\"checkbox\"\n                                />\n                                <label for=\"filterDuplicates\" data-on=\"On\" data-off=\"Off\"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-sm-6\">\n                    <div class=\"form-group\">\n                        <label for=\"dockMax\"> Max on screen </label>\n                        <input [(ngModel)]=\"dockMax\" type=\"number\" id=\"dockMax\" class=\"form-control\" min=\"1\" />\n                    </div>\n                </div>\n                <div class=\"col-sm-6\">\n                    <div class=\"form-group\">\n                        <label for=\"blockMax\"> Max at position </label>\n                        <input [(ngModel)]=\"blockMax\" type=\"number\" id=\"blockMax\" class=\"form-control\" min=\"1\" />\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <div class=\"form-group\">\n                        <label for=\"style\">Toast Style</label>\n                        <select [(ngModel)]=\"style\" id=\"style\" class=\"form-control\">\n                            <option [ngValue]=\"'material'\">Material</option>\n                            <option [ngValue]=\"'dark'\">Dark</option>\n                            <option [ngValue]=\"'simple'\">Simple</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-sm-12\">\n                    <div class=\"form-group\">\n                        <div class=\"buttons\">\n                            <div class=\"btn-group btn-group-justified\">\n                                <div class=\"btn btn-success\" (click)=\"onSuccess()\">Success</div>\n                                <div class=\"btn btn-info\" (click)=\"onInfo()\">Info</div>\n                                <div class=\"btn btn-danger\" (click)=\"onError()\">Error</div>\n                                <div class=\"btn btn-warning\" (click)=\"onWarning()\">Warning</div>\n                            </div>\n                            <div class=\"btn-group btn-group-justified\">\n                                <div class=\"btn btn-default\" (click)=\"onSimple()\">Simple</div>\n                                <div class=\"btn btn-blue\" (click)=\"onAsyncLoading()\">Async</div>\n                                <div class=\"btn btn-teal\" (click)=\"onConfirmation()\">Confirm</div>\n                                <div class=\"btn btn-black\" (click)=\"onPrompt()\">Prompt</div>\n                            </div>\n                            <div class=\"btn-group btn-group-justified\">\n                                <div class=\"btn btn-default\" (click)=\"onHtml()\">HTML</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"btn btn-block btn-primary\" (click)=\"onClear()\">Clear all</div>\n        </app-card>\n    </div>\n</div>\n<ng-snotify [ngClass]=\"style\"></ng-snotify>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdvNotificationRoutingModule } from './adv-notification-routing.module';\nimport { AdvNotificationComponent } from './adv-notification.component';\nimport { SharedModule } from '../../../../theme/shared/shared.module';\nimport { SnotifyModule, SnotifyService, ToastDefaults } from 'ng-snotify';\n\n@NgModule({\n    imports: [CommonModule, AdvNotificationRoutingModule, SharedModule, SnotifyModule],\n    declarations: [AdvNotificationComponent],\n    providers: [{ provide: 'SnotifyToastConfig', useValue: ToastDefaults }, SnotifyService]\n})\nexport class AdvNotificationModule {}\n","import { __decorate, __param } from 'tslib';\nimport { Inject, Injectable, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, EventEmitter, Output, Pipe, NgModule } from '@angular/core';\nimport { Subject, from } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * Toast style.\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = function (a0) { return { \"snotifyToast__buttons--bold\": a0 }; };\nfunction ButtonsComponent_button_1_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function ButtonsComponent_button_1_Template_button_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3); const button_r1 = restoredCtx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return button_r1.action ? button_r1.action(ctx_r2.toast) : ctx_r2.remove(); });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const button_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(2, _c0, button_r1.bold));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", button_r1.text, \" \");\n} }\nconst _c1 = function (a0) { return { \"snotifyToast__input--filled\": a0 }; };\nfunction SnotifyComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 2);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"opacity\", ctx_r0.backdrop);\n} }\nfunction SnotifyComponent_div_1_ng_snotify_toast_1_Template(rf, ctx) { if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"ng-snotify-toast\", 4);\n    ɵngcc0.ɵɵlistener(\"stateChanged\", function SnotifyComponent_div_1_ng_snotify_toast_1_Template_ng_snotify_toast_stateChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.stateChanged($event); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const notification_r4 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"toast\", notification_r4);\n} }\nfunction SnotifyComponent_div_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, SnotifyComponent_div_1_ng_snotify_toast_1_Template, 1, 1, \"ng-snotify-toast\", 3);\n    ɵngcc0.ɵɵpipe(2, \"slice\");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const position_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"snotify snotify-\", position_r2, \"\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind3(2, 4, ctx_r1.notifications[position_r2], ctx_r1.blockSizeA, ctx_r1.blockSizeB));\n} }\nconst _c2 = function (a0) { return { width: a0 }; };\nfunction ToastComponent_div_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵelement(1, \"span\", 6);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(1, _c2, ctx_r0.state.progress * 100 + \"%\"));\n} }\nfunction ToastComponent_div_2_div_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵpipe(2, \"truncate\");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"id\", \"snotify_\" + ctx_r5.toast.id);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ɵngcc0.ɵɵpipeBind2(2, 2, ctx_r5.toast.title, ctx_r5.toast.config.titleMaxLength), \" \");\n} }\nfunction ToastComponent_div_2_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵpipe(2, \"truncate\");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r6.toast.body, ctx_r6.toast.config.bodyMaxLength));\n} }\nfunction ToastComponent_div_2_ng_snotify_prompt_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"ng-snotify-prompt\", 14);\n} if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"toast\", ctx_r7.toast);\n} }\nconst _c3 = function (a1) { return [\"snotify-icon\", a1]; };\nfunction ToastComponent_div_2_div_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 15);\n} if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(1, _c3, ctx_r8.toast.config.iconClass || \"snotify-icon--\" + ctx_r8.toast.config.type));\n} }\nfunction ToastComponent_div_2_ng_template_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"img\", 16);\n} if (rf & 2) {\n    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r10.toast.config.icon, ɵngcc0.ɵɵsanitizeUrl);\n} }\nfunction ToastComponent_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(1, ToastComponent_div_2_div_1_Template, 3, 5, \"div\", 8);\n    ɵngcc0.ɵɵtemplate(2, ToastComponent_div_2_div_2_Template, 3, 4, \"div\", 9);\n    ɵngcc0.ɵɵtemplate(3, ToastComponent_div_2_ng_snotify_prompt_3_Template, 1, 1, \"ng-snotify-prompt\", 4);\n    ɵngcc0.ɵɵtemplate(4, ToastComponent_div_2_div_4_Template, 1, 3, \"div\", 10);\n    ɵngcc0.ɵɵtemplate(5, ToastComponent_div_2_ng_template_5_Template, 1, 1, \"ng-template\", null, 11, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const _r9 = ɵngcc0.ɵɵreference(6);\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.toast.title);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.toast.body);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.toast.config.type === ctx_r1.state.promptType);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r1.toast.config.icon)(\"ngIfElse\", _r9);\n} }\nfunction ToastComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 17);\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r3.toast.config.html, ɵngcc0.ɵɵsanitizeHtml);\n} }\nfunction ToastComponent_ng_snotify_button_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"ng-snotify-button\", 14);\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"toast\", ctx_r4.toast);\n} }\nconst _c4 = function (a1, a2, a3) { return [\"snotifyToast animated\", a1, a2, a3]; };\nconst _c5 = function (a0, a1, a2, a3) { return { \"-webkit-transition\": a0, transition: a1, \"-webkit-animation-duration\": a2, \"animation-duration\": a3 }; };\nvar SnotifyStyle;\r\n(function (SnotifyStyle) {\r\n    SnotifyStyle[\"simple\"] = \"simple\";\r\n    SnotifyStyle[\"success\"] = \"success\";\r\n    SnotifyStyle[\"error\"] = \"error\";\r\n    SnotifyStyle[\"warning\"] = \"warning\";\r\n    SnotifyStyle[\"info\"] = \"info\";\r\n    SnotifyStyle[\"async\"] = \"async\";\r\n    SnotifyStyle[\"confirm\"] = \"confirm\";\r\n    SnotifyStyle[\"prompt\"] = \"prompt\";\r\n})(SnotifyStyle || (SnotifyStyle = {}));\n\n/**\r\n * Transform arguments to Snotify object\r\n * @param target any\r\n * @param propertyKey SnotifyType\r\n * @param descriptor PropertyDescriptor\r\n * @returns Snotify\r\n */\r\nfunction TransformArgument(target, propertyKey, descriptor) {\r\n    if (propertyKey === SnotifyStyle.async) {\r\n        return {\r\n            value(...args) {\r\n                let result;\r\n                if (args.length === 2) {\r\n                    result = {\r\n                        title: null,\r\n                        body: args[0],\r\n                        config: null,\r\n                        action: args[1]\r\n                    };\r\n                }\r\n                else if (args.length === 3) {\r\n                    if (typeof args[1] === 'string') {\r\n                        result = {\r\n                            title: args[1],\r\n                            body: args[0],\r\n                            config: null,\r\n                            action: args[2]\r\n                        };\r\n                    }\r\n                    else {\r\n                        result = {\r\n                            title: null,\r\n                            body: args[0],\r\n                            config: args[2],\r\n                            action: args[1]\r\n                        };\r\n                    }\r\n                }\r\n                else {\r\n                    result = {\r\n                        title: args[1],\r\n                        body: args[0],\r\n                        config: args[3],\r\n                        action: args[2]\r\n                    };\r\n                }\r\n                return descriptor.value.apply(this, [result]);\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            value(...args) {\r\n                let result;\r\n                if (args.length === 1) {\r\n                    result = {\r\n                        title: null,\r\n                        body: args[0],\r\n                        config: null\r\n                    };\r\n                }\r\n                else if (args.length === 3) {\r\n                    result = {\r\n                        title: args[1],\r\n                        body: args[0],\r\n                        config: args[2]\r\n                    };\r\n                }\r\n                else {\r\n                    result = {\r\n                        title: null,\r\n                        config: null,\r\n                        body: args[0],\r\n                        [typeof args[1] === 'string' ? 'title' : 'config']: args[1]\r\n                    };\r\n                }\r\n                return descriptor.value.apply(this, [result]);\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * Generates random id\r\n * @return number\r\n */\r\nfunction uuid() {\r\n    return Math.floor(Math.random() * (Date.now() - 1)) + 1;\r\n}\r\n/**\r\n * Simple is object check.\r\n * @param item Object<any>\r\n * @returns boolean\r\n */\r\nfunction isObject(item) {\r\n    return item && typeof item === 'object' && !Array.isArray(item);\r\n}\r\n/**\r\n * Deep merge objects.\r\n * @param sources Array<Object<any>>\r\n * @returns Object<any>\r\n */\r\nfunction mergeDeep(...sources) {\r\n    const target = {};\r\n    if (!sources.length) {\r\n        return target;\r\n    }\r\n    while (sources.length > 0) {\r\n        const source = sources.shift();\r\n        if (isObject(source)) {\r\n            for (const key in source) {\r\n                if (isObject(source[key])) {\r\n                    target[key] = mergeDeep(target[key], source[key]);\r\n                }\r\n                else {\r\n                    Object.assign(target, { [key]: source[key] });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\nfunction animate(start, duration, callback) {\r\n    let endTime;\r\n    requestAnimationFrame(timestamp => (endTime = timestamp + duration));\r\n    const calculate = () => {\r\n        requestAnimationFrame(timestamp => {\r\n            const runtime = timestamp - endTime;\r\n            const progress = Math.min(runtime / duration, 1) + start;\r\n            if (runtime < duration) {\r\n                if (callback(+(100 * progress).toFixed(2), progress)) {\r\n                    calculate();\r\n                }\r\n            }\r\n        });\r\n    };\r\n}\n\n/**\r\n * Defines toast style depending on method name\r\n * @param target any\r\n * @param propertyKey SnotifyType\r\n * @param descriptor PropertyDescriptor\r\n * @returns value: ((...args: any[]) => any)\r\n */\r\nfunction SetToastType(target, propertyKey, descriptor) {\r\n    return {\r\n        value(...args) {\r\n            args[0].config = Object.assign(Object.assign({}, args[0].config), { type: propertyKey });\r\n            return descriptor.value.apply(this, args);\r\n        }\r\n    };\r\n}\n\n// @TODO remove method in observable way\r\n/**\r\n * Toast main model\r\n */\r\nclass SnotifyToast {\r\n    constructor(id, title, body, config) {\r\n        this.id = id;\r\n        this.title = title;\r\n        this.body = body;\r\n        this.config = config;\r\n        /**\r\n         * Emits SnotifyEvent\r\n         */\r\n        this.eventEmitter = new Subject();\r\n        /**\r\n         * Holds all subscribers because we need to unsubscribe from all before toast get destroyed\r\n         */\r\n        this.eventsHolder = [];\r\n        if (this.config.type === SnotifyStyle.prompt) {\r\n            this.value = '';\r\n        }\r\n        this.on('hidden', () => {\r\n            this.eventsHolder.forEach((subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Subscribe to toast events\r\n     * @returns this\r\n     * @param event SnotifyEvent\r\n     * @param action (toast: this) => void\r\n     */\r\n    on(event, action) {\r\n        this.eventsHolder.push(this.eventEmitter.subscribe((e) => {\r\n            if (e === event) {\r\n                action(this);\r\n            }\r\n        }));\r\n        return this;\r\n    }\r\n    /**\r\n     * Tests if a toast equals this toast.\r\n     * @returns boolean true then equals else false.\r\n     * @param toast SnotifyToast\r\n     */\r\n    equals(toast) {\r\n        return this.body === toast.body && this.title === toast.title && this.config.type === toast.config.type;\r\n    }\r\n}\n\n/**\r\n * SnotifyService - create, remove, config toasts\r\n */\r\nlet SnotifyService = \r\n// tslint:disable:unified-signatures\r\nclass SnotifyService {\r\n    constructor(config) {\r\n        this.config = config;\r\n        this.emitter = new Subject();\r\n        this.toastChanged = new Subject();\r\n        this.toastDeleted = new Subject();\r\n        this.notifications = [];\r\n    }\r\n    /**\r\n     * emit changes in notifications array\r\n     */\r\n    emit() {\r\n        this.emitter.next(this.notifications.slice());\r\n    }\r\n    /**\r\n     * returns SnotifyToast object\r\n     * @param id Number\r\n     * @return SnotifyToast|undefined\r\n     */\r\n    get(id) {\r\n        return this.notifications.find(toast => toast.id === id);\r\n    }\r\n    /**\r\n     * add SnotifyToast to notifications array\r\n     * @param toast SnotifyToast\r\n     */\r\n    add(toast) {\r\n        if (this.config.global.filterDuplicates && this.containsToast(toast)) {\r\n            return;\r\n        }\r\n        if (this.config.global.newOnTop) {\r\n            this.notifications.unshift(toast);\r\n        }\r\n        else {\r\n            this.notifications.push(toast);\r\n        }\r\n        this.emit();\r\n    }\r\n    /**\r\n     * checks if the toast is in the collection.\r\n     * @param inToast SnotifyToast\r\n     * @returns boolean\r\n     */\r\n    containsToast(inToast) {\r\n        return this.notifications.some(toast => toast.equals(inToast));\r\n    }\r\n    /**\r\n     * If ID passed, emits toast animation remove, if ID & REMOVE passed, removes toast from notifications array\r\n     * @param id number\r\n     * @param remove boolean\r\n     */\r\n    remove(id, remove) {\r\n        if (!id) {\r\n            return this.clear();\r\n        }\r\n        else if (remove) {\r\n            this.notifications = this.notifications.filter(toast => toast.id !== id);\r\n            return this.emit();\r\n        }\r\n        this.toastDeleted.next(id);\r\n    }\r\n    /**\r\n     * Clear notifications array\r\n     */\r\n    clear() {\r\n        this.notifications = [];\r\n        this.emit();\r\n    }\r\n    /**\r\n     * Creates toast and add it to array, returns toast id\r\n     * @param snotify Snotify\r\n     * @return number\r\n     */\r\n    create(snotify) {\r\n        const config = mergeDeep(this.config.toast, this.config.type[snotify.config.type], snotify.config);\r\n        const toast = new SnotifyToast(uuid(), snotify.title, snotify.body, config);\r\n        this.add(toast);\r\n        return toast;\r\n    }\r\n    setDefaults(defaults) {\r\n        return (this.config = mergeDeep(this.config, defaults));\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    simple(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    success(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    error(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    info(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    warning(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    confirm(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    prompt(args) {\r\n        return this.create(args);\r\n    }\r\n    /**\r\n     * Transform toast arguments into Snotify object\r\n     */\r\n    async(args) {\r\n        let async;\r\n        if (args.action instanceof Promise) {\r\n            async = from(args.action);\r\n        }\r\n        else {\r\n            async = args.action;\r\n        }\r\n        const toast = this.create(args);\r\n        toast.on('mounted', () => {\r\n            const subscription = async.subscribe((next) => {\r\n                this.mergeToast(toast, next);\r\n            }, (error) => {\r\n                this.mergeToast(toast, error, SnotifyStyle.error);\r\n                subscription.unsubscribe();\r\n            }, () => {\r\n                this.mergeToast(toast, {}, SnotifyStyle.success);\r\n                subscription.unsubscribe();\r\n            });\r\n        });\r\n        return toast;\r\n    }\r\n    mergeToast(toast, next, type) {\r\n        if (next.body) {\r\n            toast.body = next.body;\r\n        }\r\n        if (next.title) {\r\n            toast.title = next.title;\r\n        }\r\n        if (type) {\r\n            toast.config = mergeDeep(toast.config, this.config.global, this.config.toast[type], { type }, next.config);\r\n        }\r\n        else {\r\n            toast.config = mergeDeep(toast.config, next.config);\r\n        }\r\n        if (next.html) {\r\n            toast.config.html = next.html;\r\n        }\r\n        this.emit();\r\n        this.toastChanged.next(toast);\r\n    }\r\n    /**\r\n     * Creates empty toast with html string inside\r\n     * @param html string | SafeHtml\r\n     * @param config SnotifyToastConfig\r\n     * @returns number\r\n     */\r\n    html(html, config) {\r\n        return this.create({\r\n            title: null,\r\n            body: null,\r\n            config: Object.assign(Object.assign({}, config), { html })\r\n        });\r\n    }\r\n};\nSnotifyService.ɵfac = function SnotifyService_Factory(t) { return new (t || SnotifyService)(ɵngcc0.ɵɵinject('SnotifyToastConfig')); };\nSnotifyService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SnotifyService, factory: function (t) { return SnotifyService.ɵfac(t); } });\r\nSnotifyService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: ['SnotifyToastConfig',] }] }\r\n];\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"simple\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"success\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"error\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"info\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"warning\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"confirm\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"prompt\", null);\r\n__decorate([\r\n    TransformArgument\r\n    /**\r\n     * Determines current toast type and collects default configuration\r\n     */\r\n    ,\r\n    SetToastType\r\n], SnotifyService.prototype, \"async\", null);\r\nSnotifyService = __decorate([ __param(0, Inject('SnotifyToastConfig'))\r\n], SnotifyService);\n\nlet ButtonsComponent = \r\n/**\r\n * Buttons component\r\n */\r\nclass ButtonsComponent {\r\n    constructor(service) {\r\n        this.service = service;\r\n    }\r\n    /**\r\n     * remove toast\r\n     */\r\n    remove() {\r\n        this.service.remove(this.toast.id);\r\n    }\r\n};\nButtonsComponent.ɵfac = function ButtonsComponent_Factory(t) { return new (t || ButtonsComponent)(ɵngcc0.ɵɵdirectiveInject(SnotifyService)); };\nButtonsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ButtonsComponent, selectors: [[\"ng-snotify-button\"]], inputs: { toast: \"toast\" }, decls: 2, vars: 1, consts: [[1, \"snotifyToast__buttons\"], [\"type\", \"button\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 3, \"ngClass\", \"click\"]], template: function ButtonsComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, ButtonsComponent_button_1_Template, 2, 4, \"button\", 1);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.toast.config.buttons);\n    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgClass], encapsulation: 2, changeDetection: 0 });\r\nButtonsComponent.ctorParameters = () => [\r\n    { type: SnotifyService }\r\n];\r\n__decorate([\r\n    Input()\r\n], ButtonsComponent.prototype, \"toast\", void 0);\n\nlet PromptComponent = \r\n/**\r\n * Prompt component. Part of PROMPT type\r\n */\r\nclass PromptComponent {\r\n    constructor() {\r\n        /**\r\n         * Is PROMPT focused\r\n         */\r\n        this.isPromptFocused = false;\r\n    }\r\n};\nPromptComponent.ɵfac = function PromptComponent_Factory(t) { return new (t || PromptComponent)(); };\nPromptComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PromptComponent, selectors: [[\"ng-snotify-prompt\"]], inputs: { toast: \"toast\" }, decls: 6, vars: 8, consts: [[1, \"snotifyToast__input\", 3, \"ngClass\"], [\"autofocus\", \"\", \"type\", \"text\", 1, \"snotifyToast__input__field\", 3, \"id\", \"input\", \"focus\", \"blur\"], [1, \"snotifyToast__input__label\", 3, \"for\"], [1, \"snotifyToast__input__labelContent\"]], template: function PromptComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"input\", 1);\n        ɵngcc0.ɵɵlistener(\"input\", function PromptComponent_Template_input_input_1_listener($event) { ctx.toast.value = $event.target.value; return ctx.toast.eventEmitter.next(\"input\"); })(\"focus\", function PromptComponent_Template_input_focus_1_listener() { return ctx.isPromptFocused = true; })(\"blur\", function PromptComponent_Template_input_blur_1_listener() { return ctx.isPromptFocused = !!ctx.toast.value.length; });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"label\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"span\", 3);\n        ɵngcc0.ɵɵtext(4);\n        ɵngcc0.ɵɵpipe(5, \"truncate\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(6, _c1, ctx.isPromptFocused));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.toast.id);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"for\", ctx.toast.id);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(5, 4, ctx.toast.config.placeholder));\n    } }, directives: function () { return [ɵngcc1.NgClass]; }, pipes: function () { return [TruncatePipe]; }, encapsulation: 2, changeDetection: 0 });\r\n__decorate([\r\n    Input()\r\n], PromptComponent.prototype, \"toast\", void 0);\n\n/**\r\n * Toast position\r\n */\r\nvar SnotifyPosition;\r\n(function (SnotifyPosition) {\r\n    SnotifyPosition[\"leftTop\"] = \"leftTop\";\r\n    SnotifyPosition[\"leftCenter\"] = \"leftCenter\";\r\n    SnotifyPosition[\"leftBottom\"] = \"leftBottom\";\r\n    SnotifyPosition[\"rightTop\"] = \"rightTop\";\r\n    SnotifyPosition[\"rightCenter\"] = \"rightCenter\";\r\n    SnotifyPosition[\"rightBottom\"] = \"rightBottom\";\r\n    SnotifyPosition[\"centerTop\"] = \"centerTop\";\r\n    SnotifyPosition[\"centerCenter\"] = \"centerCenter\";\r\n    SnotifyPosition[\"centerBottom\"] = \"centerBottom\";\r\n})(SnotifyPosition || (SnotifyPosition = {}));\n\nlet SnotifyComponent = class SnotifyComponent {\r\n    constructor(service) {\r\n        this.service = service;\r\n        /**\r\n         * Backdrop Opacity\r\n         */\r\n        this.backdrop = -1;\r\n    }\r\n    /**\r\n     * Init base options. Subscribe to options, lifecycle change\r\n     */\r\n    ngOnInit() {\r\n        this.emitter = this.service.emitter.subscribe((toasts) => {\r\n            if (this.service.config.global.newOnTop) {\r\n                this.dockSizeA = -this.service.config.global.maxOnScreen;\r\n                this.dockSizeB = undefined;\r\n                this.blockSizeA = -this.service.config.global.maxAtPosition;\r\n                this.blockSizeB = undefined;\r\n                this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0);\r\n            }\r\n            else {\r\n                this.dockSizeA = 0;\r\n                this.dockSizeB = this.service.config.global.maxOnScreen;\r\n                this.blockSizeA = 0;\r\n                this.blockSizeB = this.service.config.global.maxAtPosition;\r\n                this.withBackdrop = toasts.filter(toast => toast.config.backdrop >= 0).reverse();\r\n            }\r\n            this.notifications = this.splitToasts(toasts.slice(this.dockSizeA, this.dockSizeB));\r\n            this.stateChanged('mounted');\r\n        });\r\n    }\r\n    // TODO: fix backdrop if more than one toast called in a row\r\n    /**\r\n     * Changes the backdrop opacity\r\n     * @param event SnotifyEvent\r\n     */\r\n    stateChanged(event) {\r\n        if (!this.withBackdrop.length) {\r\n            if (this.backdrop >= 0) {\r\n                this.backdrop = -1;\r\n            }\r\n            return;\r\n        }\r\n        switch (event) {\r\n            case 'mounted':\r\n                if (this.backdrop < 0) {\r\n                    this.backdrop = 0;\r\n                }\r\n                break;\r\n            case 'beforeShow':\r\n                this.backdrop = this.withBackdrop[this.withBackdrop.length - 1].config.backdrop;\r\n                break;\r\n            case 'beforeHide':\r\n                if (this.withBackdrop.length === 1) {\r\n                    this.backdrop = 0;\r\n                }\r\n                break;\r\n            case 'hidden':\r\n                if (this.withBackdrop.length === 1) {\r\n                    this.backdrop = -1;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Split toasts toasts into different objects\r\n     * @param toasts SnotifyToast[]\r\n     * @returns SnotifyNotifications\r\n     */\r\n    splitToasts(toasts) {\r\n        const result = {};\r\n        for (const property in SnotifyPosition) {\r\n            if (SnotifyPosition.hasOwnProperty(property)) {\r\n                result[SnotifyPosition[property]] = [];\r\n            }\r\n        }\r\n        toasts.forEach((toast) => {\r\n            result[toast.config.position].push(toast);\r\n        });\r\n        return result;\r\n    }\r\n    /**\r\n     * Unsubscribe subscriptions\r\n     */\r\n    ngOnDestroy() {\r\n        this.emitter.unsubscribe();\r\n    }\r\n};\nSnotifyComponent.ɵfac = function SnotifyComponent_Factory(t) { return new (t || SnotifyComponent)(ɵngcc0.ɵɵdirectiveInject(SnotifyService)); };\nSnotifyComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SnotifyComponent, selectors: [[\"ng-snotify\"]], decls: 3, vars: 4, consts: [[\"class\", \"snotify-backdrop\", 3, \"opacity\", 4, \"ngIf\"], [3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"snotify-backdrop\"], [3, \"toast\", \"stateChanged\", 4, \"ngFor\", \"ngForOf\"], [3, \"toast\", \"stateChanged\"]], template: function SnotifyComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, SnotifyComponent_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, SnotifyComponent_div_1_Template, 3, 8, \"div\", 1);\n        ɵngcc0.ɵɵpipe(2, \"keys\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.backdrop >= 0);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(2, 2, ctx.notifications));\n    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc1.NgForOf, ToastComponent]; }, pipes: function () { return [KeysPipe, ɵngcc1.SlicePipe]; }, encapsulation: 2 });\r\nSnotifyComponent.ctorParameters = () => [\r\n    { type: SnotifyService }\r\n];\n\nlet ToastComponent = class ToastComponent {\r\n    constructor(service) {\r\n        this.service = service;\r\n        this.stateChanged = new EventEmitter();\r\n        /**\r\n         * Toast state\r\n         */\r\n        this.state = {\r\n            paused: false,\r\n            progress: 0,\r\n            animation: '',\r\n            isDestroying: false,\r\n            promptType: SnotifyStyle.prompt\r\n        };\r\n    }\r\n    // Lifecycles\r\n    /**\r\n     * Init base options. Subscribe to toast changed, toast deleted\r\n     */\r\n    ngOnInit() {\r\n        this.toastChangedSubscription = this.service.toastChanged.subscribe((toast) => {\r\n            if (this.toast.id === toast.id) {\r\n                this.initToast();\r\n            }\r\n        });\r\n        this.toastDeletedSubscription = this.service.toastDeleted.subscribe(id => {\r\n            if (this.toast.id === id) {\r\n                this.onRemove();\r\n            }\r\n        });\r\n        if (!this.toast.config.timeout) {\r\n            this.toast.config.showProgressBar = false;\r\n        }\r\n        this.toast.eventEmitter.next('mounted');\r\n        this.state.animation = 'snotifyToast--in';\r\n    }\r\n    ngAfterContentInit() {\r\n        setTimeout(() => {\r\n            this.stateChanged.emit('beforeShow');\r\n            this.toast.eventEmitter.next('beforeShow');\r\n            this.state.animation = this.toast.config.animation.enter;\r\n        }, this.service.config.toast.animation.time / 5); // time to show toast push animation (snotifyToast--in)\r\n    }\r\n    /**\r\n     * Unsubscribe subscriptions\r\n     */\r\n    ngOnDestroy() {\r\n        cancelAnimationFrame(this.animationFrame);\r\n        this.toast.eventEmitter.next('destroyed');\r\n        this.toastChangedSubscription.unsubscribe();\r\n        this.toastDeletedSubscription.unsubscribe();\r\n    }\r\n    /*\r\n    Event hooks\r\n     */\r\n    /**\r\n     * Trigger OnClick lifecycle\r\n     */\r\n    onClick() {\r\n        this.toast.eventEmitter.next('click');\r\n        if (this.toast.config.closeOnClick) {\r\n            this.service.remove(this.toast.id);\r\n        }\r\n    }\r\n    /**\r\n     * Trigger beforeDestroy lifecycle. Removes toast\r\n     */\r\n    onRemove() {\r\n        this.state.isDestroying = true;\r\n        this.toast.eventEmitter.next('beforeHide');\r\n        this.stateChanged.emit('beforeHide');\r\n        this.state.animation = this.toast.config.animation.exit;\r\n        setTimeout(() => {\r\n            this.stateChanged.emit('hidden');\r\n            this.state.animation = 'snotifyToast--out';\r\n            this.toast.eventEmitter.next('hidden');\r\n            setTimeout(() => this.service.remove(this.toast.id, true), this.toast.config.animation.time / 2);\r\n        }, this.toast.config.animation.time / 2);\r\n    }\r\n    /**\r\n     * Trigger onHoverEnter lifecycle\r\n     */\r\n    onMouseEnter() {\r\n        this.toast.eventEmitter.next('mouseenter');\r\n        if (this.toast.config.pauseOnHover) {\r\n            this.state.paused = true;\r\n        }\r\n    }\r\n    /**\r\n     * Trigger onHoverLeave lifecycle\r\n     */\r\n    onMouseLeave() {\r\n        if (this.toast.config.pauseOnHover && this.toast.config.timeout) {\r\n            this.state.paused = false;\r\n            this.startTimeout(this.toast.config.timeout * this.state.progress);\r\n        }\r\n        this.toast.eventEmitter.next('mouseleave');\r\n    }\r\n    /**\r\n     * Remove toast completely after animation\r\n     */\r\n    onExitTransitionEnd() {\r\n        if (this.state.isDestroying) {\r\n            return;\r\n        }\r\n        this.initToast();\r\n        this.toast.eventEmitter.next('shown');\r\n    }\r\n    /*\r\n     Common\r\n     */\r\n    /**\r\n     * Initialize base toast config\r\n     *\r\n     */\r\n    initToast() {\r\n        if (this.toast.config.timeout > 0) {\r\n            this.startTimeout(0);\r\n        }\r\n    }\r\n    /**\r\n     * Start progress bar\r\n     * @param startTime number\r\n     */\r\n    startTimeout(startTime = 0) {\r\n        const start = performance.now();\r\n        const calculate = () => {\r\n            this.animationFrame = requestAnimationFrame(timestamp => {\r\n                const runtime = timestamp + startTime - start;\r\n                const progress = Math.min(runtime / this.toast.config.timeout, 1);\r\n                if (this.state.paused) {\r\n                    cancelAnimationFrame(this.animationFrame);\r\n                }\r\n                else if (runtime < this.toast.config.timeout) {\r\n                    this.state.progress = progress;\r\n                    calculate();\r\n                }\r\n                else {\r\n                    this.state.progress = 1;\r\n                    cancelAnimationFrame(this.animationFrame);\r\n                    this.service.remove(this.toast.id);\r\n                }\r\n            });\r\n        };\r\n        calculate();\r\n    }\r\n};\nToastComponent.ɵfac = function ToastComponent_Factory(t) { return new (t || ToastComponent)(ɵngcc0.ɵɵdirectiveInject(SnotifyService)); };\nToastComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ToastComponent, selectors: [[\"ng-snotify-toast\"]], inputs: { toast: \"toast\" }, outputs: { stateChanged: \"stateChanged\" }, decls: 6, vars: 18, consts: [[3, \"ngClass\", \"ngStyle\", \"animationend\", \"click\", \"mouseenter\", \"mouseleave\"], [\"class\", \"snotifyToast__progressBar\", 4, \"ngIf\"], [\"class\", \"snotifyToast__inner\", 4, \"ngIf\", \"ngIfElse\"], [\"toastHTML\", \"\"], [3, \"toast\", 4, \"ngIf\"], [1, \"snotifyToast__progressBar\"], [1, \"snotifyToast__progressBar__percentage\", 3, \"ngStyle\"], [1, \"snotifyToast__inner\"], [\"class\", \"snotifyToast__title\", 4, \"ngIf\"], [\"class\", \"snotifyToast__body\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\", \"ngIfElse\"], [\"elseBlock\", \"\"], [1, \"snotifyToast__title\"], [1, \"snotifyToast__body\"], [3, \"toast\"], [3, \"ngClass\"], [1, \"snotify-icon\", 3, \"src\"], [1, \"snotifyToast__inner\", 3, \"innerHTML\"]], template: function ToastComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"animationend\", function ToastComponent_Template_div_animationend_0_listener() { return ctx.onExitTransitionEnd(); })(\"click\", function ToastComponent_Template_div_click_0_listener() { return ctx.onClick(); })(\"mouseenter\", function ToastComponent_Template_div_mouseenter_0_listener() { return ctx.onMouseEnter(); })(\"mouseleave\", function ToastComponent_Template_div_mouseleave_0_listener() { return ctx.onMouseLeave(); });\n        ɵngcc0.ɵɵtemplate(1, ToastComponent_div_1_Template, 2, 3, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, ToastComponent_div_2_Template, 7, 5, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(3, ToastComponent_ng_template_3_Template, 1, 1, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(5, ToastComponent_ng_snotify_button_5_Template, 1, 1, \"ng-snotify-button\", 4);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r2 = ɵngcc0.ɵɵreference(4);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(9, _c4, \"snotify-\" + ctx.toast.config.type, ctx.state.animation, ctx.toast.valid === undefined ? \"\" : ctx.toast.valid ? \"snotifyToast--valid\" : \"snotifyToast--invalid\"))(\"ngStyle\", ɵngcc0.ɵɵpureFunction4(13, _c5, ctx.toast.config.animation.time + \"ms\", ctx.toast.config.animation.time + \"ms\", ctx.toast.config.animation.time + \"ms\", ctx.toast.config.animation.time + \"ms\"));\n        ɵngcc0.ɵɵattribute(\"role\", ctx.toast.config.type === ctx.state.promptType ? \"dialog\" : \"alert\")(\"aria-labelledby\", \"snotify_\" + ctx.toast.id)(\"aria-modal\", ctx.toast.config.type === ctx.state.promptType);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.toast.config.showProgressBar);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.toast.config.html)(\"ngIfElse\", _r2);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.toast.config.buttons);\n    } }, directives: function () { return [ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc1.NgIf, PromptComponent, ButtonsComponent]; }, pipes: function () { return [TruncatePipe]; }, encapsulation: 2 });\r\nToastComponent.ctorParameters = () => [\r\n    { type: SnotifyService }\r\n];\r\n__decorate([\r\n    Input()\r\n], ToastComponent.prototype, \"toast\", void 0);\r\n__decorate([\r\n    Output()\r\n], ToastComponent.prototype, \"stateChanged\", void 0);\n\nlet KeysPipe = \r\n/**\r\n * Extract object keys pipe\r\n */\r\nclass KeysPipe {\r\n    transform(value, args = null) {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        return Object.keys(value);\r\n    }\r\n};\nKeysPipe.ɵfac = function KeysPipe_Factory(t) { return new (t || KeysPipe)(); };\nKeysPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"keys\", type: KeysPipe, pure: false });\n\nlet TruncatePipe = \r\n/**\r\n * Truncate toast text pipe\r\n */\r\nclass TruncatePipe {\r\n    transform(value, ...args) {\r\n        let limit = 40;\r\n        let trail = '...';\r\n        if (args.length > 0) {\r\n            limit = args.length > 0 ? parseInt(args[0], 10) : limit;\r\n            trail = args.length > 1 ? args[1] : trail;\r\n        }\r\n        return value.length > limit ? value.substring(0, limit) + trail : value;\r\n    }\r\n};\nTruncatePipe.ɵfac = function TruncatePipe_Factory(t) { return new (t || TruncatePipe)(); };\nTruncatePipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"truncate\", type: TruncatePipe, pure: true });\n\nvar SnotifyModule_1;\r\nlet SnotifyModule = SnotifyModule_1 = class SnotifyModule {\r\n    static forRoot() {\r\n        return {\r\n            ngModule: SnotifyModule_1,\r\n            providers: [SnotifyService]\r\n        };\r\n    }\r\n};\nSnotifyModule.ɵfac = function SnotifyModule_Factory(t) { return new (t || SnotifyModule)(); };\nSnotifyModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: SnotifyModule });\nSnotifyModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SnotifyService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: ['SnotifyToastConfig']\n            }] }]; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonsComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ng-snotify-button',\n                template: \"<div class=\\\"snotifyToast__buttons\\\">\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    *ngFor=\\\"let button of toast.config.buttons\\\"\\r\\n    [ngClass]=\\\"{ 'snotifyToast__buttons--bold': button.bold }\\\"\\r\\n    (click)=\\\"button.action ? button.action(toast) : remove()\\\"\\r\\n  >\\r\\n    {{ button.text }}\\r\\n  </button>\\r\\n</div>\\r\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: SnotifyService }]; }, { toast: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PromptComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ng-snotify-prompt',\n                template: \"<span class=\\\"snotifyToast__input\\\" [ngClass]=\\\"{ 'snotifyToast__input--filled': isPromptFocused }\\\">\\r\\n  <input\\r\\n    (input)=\\\"toast.value = $event.target.value; toast.eventEmitter.next('input')\\\"\\r\\n    autofocus\\r\\n    class=\\\"snotifyToast__input__field\\\"\\r\\n    type=\\\"text\\\"\\r\\n    [id]=\\\"toast.id\\\"\\r\\n    (focus)=\\\"isPromptFocused = true\\\"\\r\\n    (blur)=\\\"isPromptFocused = !!toast.value.length\\\"\\r\\n  />\\r\\n  <label class=\\\"snotifyToast__input__label\\\" [for]=\\\"toast.id\\\">\\r\\n    <span class=\\\"snotifyToast__input__labelContent\\\">{{ toast.config.placeholder | truncate }}</span>\\r\\n  </label>\\r\\n</span>\\r\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return []; }, { toast: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SnotifyComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ng-snotify',\n                template: \"<div class=\\\"snotify-backdrop\\\" *ngIf=\\\"backdrop >= 0\\\" [style.opacity]=\\\"backdrop\\\"></div>\\r\\n<div *ngFor=\\\"let position of notifications | keys\\\" class=\\\"snotify snotify-{{ position }}\\\">\\r\\n  <ng-snotify-toast\\r\\n    *ngFor=\\\"let notification of notifications[position] | slice: blockSizeA:blockSizeB\\\"\\r\\n    [toast]=\\\"notification\\\"\\r\\n    (stateChanged)=\\\"stateChanged($event)\\\"\\r\\n  >\\r\\n  </ng-snotify-toast>\\r\\n</div>\\r\\n\",\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: SnotifyService }]; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToastComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ng-snotify-toast',\n                template: \"<div\\r\\n  [attr.role]=\\\"toast.config.type === state.promptType ? 'dialog' : 'alert'\\\"\\r\\n  [attr.aria-labelledby]=\\\"'snotify_' + toast.id\\\"\\r\\n  [attr.aria-modal]=\\\"toast.config.type === state.promptType\\\"\\r\\n  [ngClass]=\\\"[\\r\\n    'snotifyToast animated',\\r\\n    'snotify-' + toast.config.type,\\r\\n    state.animation,\\r\\n    toast.valid === undefined ? '' : toast.valid ? 'snotifyToast--valid' : 'snotifyToast--invalid'\\r\\n  ]\\\"\\r\\n  [ngStyle]=\\\"{\\r\\n    '-webkit-transition': toast.config.animation.time + 'ms',\\r\\n    transition: toast.config.animation.time + 'ms',\\r\\n    '-webkit-animation-duration': toast.config.animation.time + 'ms',\\r\\n    'animation-duration': toast.config.animation.time + 'ms'\\r\\n  }\\\"\\r\\n  (animationend)=\\\"onExitTransitionEnd()\\\"\\r\\n  (click)=\\\"onClick()\\\"\\r\\n  (mouseenter)=\\\"onMouseEnter()\\\"\\r\\n  (mouseleave)=\\\"onMouseLeave()\\\"\\r\\n>\\r\\n  <div class=\\\"snotifyToast__progressBar\\\" *ngIf=\\\"toast.config.showProgressBar\\\">\\r\\n    <span class=\\\"snotifyToast__progressBar__percentage\\\" [ngStyle]=\\\"{ width: state.progress * 100 + '%' }\\\"></span>\\r\\n  </div>\\r\\n  <div class=\\\"snotifyToast__inner\\\" *ngIf=\\\"!toast.config.html; else toastHTML\\\">\\r\\n    <div class=\\\"snotifyToast__title\\\" [attr.id]=\\\"'snotify_' + toast.id\\\" *ngIf=\\\"toast.title\\\">\\r\\n      {{ toast.title | truncate: toast.config.titleMaxLength }}\\r\\n    </div>\\r\\n    <div class=\\\"snotifyToast__body\\\" *ngIf=\\\"toast.body\\\">{{ toast.body | truncate: toast.config.bodyMaxLength }}</div>\\r\\n    <ng-snotify-prompt *ngIf=\\\"toast.config.type === state.promptType\\\" [toast]=\\\"toast\\\"> </ng-snotify-prompt>\\r\\n    <div\\r\\n      *ngIf=\\\"!toast.config.icon; else elseBlock\\\"\\r\\n      [ngClass]=\\\"['snotify-icon', toast.config.iconClass || 'snotify-icon--' + toast.config.type]\\\"\\r\\n    ></div>\\r\\n    <ng-template #elseBlock>\\r\\n      <img class=\\\"snotify-icon\\\" [src]=\\\"toast.config.icon\\\" />\\r\\n    </ng-template>\\r\\n  </div>\\r\\n  <ng-template #toastHTML>\\r\\n    <div class=\\\"snotifyToast__inner\\\" [innerHTML]=\\\"toast.config.html\\\"></div>\\r\\n  </ng-template>\\r\\n  <ng-snotify-button *ngIf=\\\"toast.config.buttons\\\" [toast]=\\\"toast\\\"></ng-snotify-button>\\r\\n</div>\\r\\n\",\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: SnotifyService }]; }, { stateChanged: [{\n            type: Output\n        }], toast: [{\n            type: Input\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KeysPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'keys',\n                pure: false\n            }]\n    }], null, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TruncatePipe, [{\n        type: Pipe,\n        args: [{\n                name: 'truncate'\n            }]\n    }], null, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SnotifyModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                declarations: [SnotifyComponent, ToastComponent, TruncatePipe, ButtonsComponent, PromptComponent, KeysPipe],\n                exports: [SnotifyComponent, TruncatePipe, KeysPipe]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SnotifyModule, { declarations: function () { return [SnotifyComponent, ToastComponent, TruncatePipe, ButtonsComponent, PromptComponent, KeysPipe]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SnotifyComponent, TruncatePipe, KeysPipe]; } }); })();\n\n/**\r\n * Snotify default configuration object\r\n */\r\nconst ToastDefaults = {\r\n    global: {\r\n        newOnTop: true,\r\n        maxOnScreen: 8,\r\n        maxAtPosition: 8,\r\n        filterDuplicates: false\r\n    },\r\n    toast: {\r\n        type: SnotifyStyle.simple,\r\n        showProgressBar: true,\r\n        timeout: 2000,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        bodyMaxLength: 150,\r\n        titleMaxLength: 16,\r\n        backdrop: -1,\r\n        icon: null,\r\n        iconClass: null,\r\n        html: null,\r\n        position: SnotifyPosition.rightBottom,\r\n        animation: { enter: 'fadeIn', exit: 'fadeOut', time: 400 }\r\n    },\r\n    type: {\r\n        [SnotifyStyle.prompt]: {\r\n            timeout: 0,\r\n            closeOnClick: false,\r\n            buttons: [\r\n                { text: 'Ok', action: null, bold: true },\r\n                { text: 'Cancel', action: null, bold: false }\r\n            ],\r\n            placeholder: 'Enter answer here...',\r\n            type: SnotifyStyle.prompt\r\n        },\r\n        [SnotifyStyle.confirm]: {\r\n            timeout: 0,\r\n            closeOnClick: false,\r\n            buttons: [\r\n                { text: 'Ok', action: null, bold: true },\r\n                { text: 'Cancel', action: null, bold: false }\r\n            ],\r\n            type: SnotifyStyle.confirm\r\n        },\r\n        [SnotifyStyle.simple]: {\r\n            type: SnotifyStyle.simple\r\n        },\r\n        [SnotifyStyle.success]: {\r\n            type: SnotifyStyle.success\r\n        },\r\n        [SnotifyStyle.error]: {\r\n            type: SnotifyStyle.error\r\n        },\r\n        [SnotifyStyle.warning]: {\r\n            type: SnotifyStyle.warning\r\n        },\r\n        [SnotifyStyle.info]: {\r\n            type: SnotifyStyle.info\r\n        },\r\n        [SnotifyStyle.async]: {\r\n            pauseOnHover: false,\r\n            closeOnClick: false,\r\n            timeout: 0,\r\n            showProgressBar: false,\r\n            type: SnotifyStyle.async\r\n        }\r\n    }\r\n};\n\n/*\r\n * Public API Surface of ng-snotify\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ButtonsComponent, KeysPipe, PromptComponent, SnotifyComponent, SnotifyModule, SnotifyPosition, SnotifyService, SnotifyStyle, SnotifyToast, ToastComponent, ToastDefaults, TruncatePipe, SnotifyComponent as ɵa, SnotifyService as ɵb, TransformArgument as ɵd, SetToastType as ɵe, ToastComponent as ɵf, TruncatePipe as ɵg, ButtonsComponent as ɵh, PromptComponent as ɵi, KeysPipe as ɵj };\n\n"],"names":[],"sourceRoot":"webpack:///"}